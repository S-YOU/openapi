package openapi

// This file was automatically generated by genbuilders.go on 2018-05-21T19:54:19+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"sync"
)

type listIterator struct {
	mu    sync.RWMutex
	items []interface{}
}

// Item returns the next item in this iterator
func (iter *listIterator) Item() interface{} {
	iter.mu.Lock()
	defer iter.mu.Unlock()

	if !iter.nextNoLock() {
		return nil
	}

	item := iter.items[0]
	iter.items = iter.items[1:]
	return item
}

func (iter *listIterator) nextNoLock() bool {
	return len(iter.items) > 0
}

// Next returns true if there are more elements in this iterator
func (iter *listIterator) Next() bool {
	iter.mu.RLock()
	defer iter.mu.RUnlock()
	return iter.nextNoLock()
}

type CallbackListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *CallbackListIterator) Item() Callback {
	return iter.listIterator.Item().(Callback)
}

type ComponentsListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ComponentsListIterator) Item() Components {
	return iter.listIterator.Item().(Components)
}

type ContactListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ContactListIterator) Item() Contact {
	return iter.listIterator.Item().(Contact)
}

type DiscriminatorListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *DiscriminatorListIterator) Item() Discriminator {
	return iter.listIterator.Item().(Discriminator)
}

type EncodingListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *EncodingListIterator) Item() Encoding {
	return iter.listIterator.Item().(Encoding)
}

type ExampleListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ExampleListIterator) Item() Example {
	return iter.listIterator.Item().(Example)
}

type ExternalDocumentationListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ExternalDocumentationListIterator) Item() ExternalDocumentation {
	return iter.listIterator.Item().(ExternalDocumentation)
}

type HeaderListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *HeaderListIterator) Item() Header {
	return iter.listIterator.Item().(Header)
}

type InfoListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *InfoListIterator) Item() Info {
	return iter.listIterator.Item().(Info)
}

type LicenseListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *LicenseListIterator) Item() License {
	return iter.listIterator.Item().(License)
}

type LinkListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *LinkListIterator) Item() Link {
	return iter.listIterator.Item().(Link)
}

type MediaTypeListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *MediaTypeListIterator) Item() MediaType {
	return iter.listIterator.Item().(MediaType)
}

type OAuthFlowListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *OAuthFlowListIterator) Item() OAuthFlow {
	return iter.listIterator.Item().(OAuthFlow)
}

type OAuthFlowsListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *OAuthFlowsListIterator) Item() OAuthFlows {
	return iter.listIterator.Item().(OAuthFlows)
}

type OpenAPIListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *OpenAPIListIterator) Item() OpenAPI {
	return iter.listIterator.Item().(OpenAPI)
}

type OperationListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *OperationListIterator) Item() Operation {
	return iter.listIterator.Item().(Operation)
}

type ParameterListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ParameterListIterator) Item() Parameter {
	return iter.listIterator.Item().(Parameter)
}

type PathItemListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *PathItemListIterator) Item() PathItem {
	return iter.listIterator.Item().(PathItem)
}

type PathsListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *PathsListIterator) Item() Paths {
	return iter.listIterator.Item().(Paths)
}

type ReferenceListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ReferenceListIterator) Item() Reference {
	return iter.listIterator.Item().(Reference)
}

type RequestBodyListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *RequestBodyListIterator) Item() RequestBody {
	return iter.listIterator.Item().(RequestBody)
}

type ResponseListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ResponseListIterator) Item() Response {
	return iter.listIterator.Item().(Response)
}

type ResponsesListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ResponsesListIterator) Item() Responses {
	return iter.listIterator.Item().(Responses)
}

type SchemaListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SchemaListIterator) Item() Schema {
	return iter.listIterator.Item().(Schema)
}

type SecurityRequirementListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SecurityRequirementListIterator) Item() SecurityRequirement {
	return iter.listIterator.Item().(SecurityRequirement)
}

type SecuritySchemeListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SecuritySchemeListIterator) Item() SecurityScheme {
	return iter.listIterator.Item().(SecurityScheme)
}

type ServerListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ServerListIterator) Item() Server {
	return iter.listIterator.Item().(Server)
}

type ServerVariableListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ServerVariableListIterator) Item() ServerVariable {
	return iter.listIterator.Item().(ServerVariable)
}

type TagListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *TagListIterator) Item() Tag {
	return iter.listIterator.Item().(Tag)
}
