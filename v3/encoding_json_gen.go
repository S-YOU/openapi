package openapi

// This file was automatically generated by genbuilders.go on 2018-05-20T21:56:43+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"github.com/pkg/errors"
)

var _ = errors.Cause

type encodingMarshalProxy struct {
	ContentType   string            `json:"contentType" yaml:"contentType"`
	Headers       map[string]Header `json:"headers" yaml:"headers"`
	Explode       bool              `json:"explode" yaml:"explode"`
	AllowReserved bool              `json:"allowReserved" yaml:"allowReserved"`
}

type encodingUnmarshalProxy struct {
	ContentType   string                     `json:"contentType" yaml:"contentType"`
	Headers       map[string]json.RawMessage `json:"headers" yaml:"headers"`
	Explode       bool                       `json:"explode" yaml:"explode"`
	AllowReserved bool                       `json:"allowReserved" yaml:"allowReserved"`
}

func (v *encoding) MarshalJSON() ([]byte, error) {
	var proxy encodingMarshalProxy
	proxy.ContentType = v.contentType
	proxy.Headers = v.headers
	proxy.Explode = v.explode
	proxy.AllowReserved = v.allowReserved
	return json.Marshal(proxy)
}

func (v *encoding) UnmarshalJSON(data []byte) error {
	var proxy encodingUnmarshalProxy
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	v.contentType = proxy.ContentType

	if len(proxy.Headers) > 0 {
		m := make(map[string]Header)
		for key, pv := range proxy.Headers {
			var decoded header
			if err := json.Unmarshal(pv, &decoded); err != nil {
				return errors.Wrapf(err, `failed to unmasrhal element %s of field Headers`, key)
			}
			m[key] = &decoded
		}
		v.headers = m
	}
	v.explode = proxy.Explode
	v.allowReserved = proxy.AllowReserved
	return nil
}
