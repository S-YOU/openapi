package openapi

// This file was automatically generated by genbuilders.go on 2018-05-20T20:06:19+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"github.com/pkg/errors"
)

var _ = errors.Cause

type openAPIMarshalProxy struct {
	Version      string                `json:"openapi" builder:"required" default:"DefaultVersion"`
	Info         Info                  `json:"info" builder:"required"`
	Servers      []Server              `json:"servers,omitempty"`
	Paths        Paths                 `json:"paths" builder:"required"`
	Components   Components            `json:"components,omitempty"`
	Security     SecurityRequirement   `json:"security,omitempty"`
	Tags         []Tag                 `json:"tags,omitempty"`
	ExternalDocs ExternalDocumentation `json:"externalDocs,omitempty"`
}

type openAPIUnmarshalProxy struct {
	Version      string          `json:"openapi" builder:"required" default:"DefaultVersion"`
	Info         json.RawMessage `json:"info" builder:"required"`
	Servers      []Server        `json:"servers,omitempty"`
	Paths        json.RawMessage `json:"paths" builder:"required"`
	Components   json.RawMessage `json:"components,omitempty"`
	Security     json.RawMessage `json:"security,omitempty"`
	Tags         []Tag           `json:"tags,omitempty"`
	ExternalDocs json.RawMessage `json:"externalDocs,omitempty"`
}

func (v *openAPI) MarshalJSON() ([]byte, error) {
	var proxy openAPIMarshalProxy
	proxy.Version = v.version
	proxy.Info = v.info
	proxy.Servers = v.servers
	proxy.Paths = v.paths
	proxy.Components = v.components
	proxy.Security = v.security
	proxy.Tags = v.tags
	proxy.ExternalDocs = v.externalDocs
	return json.Marshal(proxy)
}

func (v *openAPI) UnmarshalJSON(data []byte) error {
	var proxy openAPIUnmarshalProxy
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	v.version = proxy.Version

	if len(proxy.Info) > 0 {
		var decoded info
		if err := json.Unmarshal(proxy.Info, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Info`)
		}

		v.info = &decoded
	}
	v.servers = proxy.Servers

	if len(proxy.Paths) > 0 {
		var decoded paths
		if err := json.Unmarshal(proxy.Paths, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Paths`)
		}

		v.paths = &decoded
	}

	if len(proxy.Components) > 0 {
		var decoded components
		if err := json.Unmarshal(proxy.Components, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Components`)
		}

		v.components = &decoded
	}

	if len(proxy.Security) > 0 {
		var decoded securityRequirement
		if err := json.Unmarshal(proxy.Security, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Security`)
		}

		v.security = &decoded
	}
	v.tags = proxy.Tags

	if len(proxy.ExternalDocs) > 0 {
		var decoded externalDocumentation
		if err := json.Unmarshal(proxy.ExternalDocs, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field ExternalDocs`)
		}

		v.externalDocs = &decoded
	}
	return nil
}
