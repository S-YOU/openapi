package openapi

// This file was automatically generated by genbuilders.go on 2018-05-24T11:15:54+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"log"
)

import (
	"encoding/json"
	"github.com/pkg/errors"
	"strings"
)

var _ = errors.Cause

type mediaTypeMarshalProxy struct {
	Reference string              `json:"$ref,omitempty"`
	Schema    Schema              `json:"schema,omitempty"`
	Examples  map[string]Example  `json:"examples,omitempty"`
	Encoding  map[string]Encoding `json:"encoding,omitempty"`
}

type mediaTypeUnmarshalProxy struct {
	Reference string                     `json:"$ref,omitempty"`
	Schema    json.RawMessage            `json:"schema,omitempty"`
	Examples  map[string]json.RawMessage `json:"examples,omitempty"`
	Encoding  map[string]json.RawMessage `json:"encoding,omitempty"`
}

func (v *mediaType) MarshalJSON() ([]byte, error) {
	var proxy mediaTypeMarshalProxy
	if len(v.reference) > 0 {
		proxy.Reference = v.reference
		return json.Marshal(proxy)
	}
	proxy.Schema = v.schema
	proxy.Examples = v.examples
	proxy.Encoding = v.encoding
	return json.Marshal(proxy)
}

func (v *mediaType) UnmarshalJSON(data []byte) error {
	var proxy mediaTypeUnmarshalProxy
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	if len(proxy.Reference) > 0 {
		v.reference = proxy.Reference
		return nil
	}

	if len(proxy.Schema) > 0 {
		var decoded schema
		if err := json.Unmarshal(proxy.Schema, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Schema`)
		}

		v.schema = &decoded
	}

	if len(proxy.Examples) > 0 {
		m := make(map[string]Example)
		for key, pv := range proxy.Examples {
			var decoded example
			if err := json.Unmarshal(pv, &decoded); err != nil {
				return errors.Wrapf(err, `failed to unmasrhal element %s of field Examples`, key)
			}
			m[key] = &decoded
		}
		v.examples = m
	}

	if len(proxy.Encoding) > 0 {
		m := make(map[string]Encoding)
		for key, pv := range proxy.Encoding {
			var decoded encoding
			if err := json.Unmarshal(pv, &decoded); err != nil {
				return errors.Wrapf(err, `failed to unmasrhal element %s of field Encoding`, key)
			}
			m[key] = &decoded
		}
		v.encoding = m
	}
	return nil
}

func (v *mediaType) Resolve(resolver *Resolver) error {
	log.Printf(`mediaType.Resolve`)
	if v.IsReference() {
		resolved, err := resolver.Resolve(v.Reference())
		if err != nil {
			return errors.Wrapf(err, `failed to resolve reference %s`, v.Reference())
		}
		asserted, ok := resolved.(*mediaType)
		if !ok {
			return errors.Wrapf(err, `expected resolved reference to be of type MediaType, but got %T`, resolved)
		}
		mutator := MutateMediaType(v)
		mutator.Schema(asserted.Schema())
		for iter := asserted.Examples(); iter.Next(); {
			key, item := iter.Item()
			mutator.Example(key, item)
		}
		for iter := asserted.Encoding(); iter.Next(); {
			key, item := iter.Item()
			mutator.Encoding(key, item)
		}
		return errors.Wrap(mutator.Do(), `failed to mutate`)
	}
	if v.schema != nil {
		if err := v.schema.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Schema`)
		}
	}
	if v.examples != nil {
		if err := v.examples.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Examples`)
		}
	}
	if v.encoding != nil {
		if err := v.encoding.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Encoding`)
		}
	}
	return nil
}

func (v *mediaType) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "schema":
		target = v.schema
	case "examples":
		target = v.examples
	case "encoding":
		target = v.encoding
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
