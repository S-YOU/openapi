package openapi

// This file was automatically generated by genbuilders.go on 2018-05-21T19:54:19+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"github.com/pkg/errors"
	"strings"
)

var _ = errors.Cause

type serverMarshalProxy struct {
	URL         string                    `json:"url"`
	Description string                    `json:"description,omitempty"`
	Variables   map[string]ServerVariable `json:"variables,omitempty"`
}

type serverUnmarshalProxy struct {
	URL         string                     `json:"url"`
	Description string                     `json:"description,omitempty"`
	Variables   map[string]json.RawMessage `json:"variables,omitempty"`
}

func (v *server) MarshalJSON() ([]byte, error) {
	var proxy serverMarshalProxy
	proxy.URL = v.uRL
	proxy.Description = v.description
	proxy.Variables = v.variables
	return json.Marshal(proxy)
}

func (v *server) UnmarshalJSON(data []byte) error {
	var proxy serverUnmarshalProxy
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	v.uRL = proxy.URL
	v.description = proxy.Description

	if len(proxy.Variables) > 0 {
		m := make(map[string]ServerVariable)
		for key, pv := range proxy.Variables {
			var decoded serverVariable
			if err := json.Unmarshal(pv, &decoded); err != nil {
				return errors.Wrapf(err, `failed to unmasrhal element %s of field Variables`, key)
			}
			m[key] = &decoded
		}
		v.variables = m
	}
	return nil
}

func (v *server) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "url":
		target = v.uRL
	case "description":
		target = v.description
	case "variables":
		target = v.variables
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
