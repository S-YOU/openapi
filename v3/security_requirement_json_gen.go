package openapi

// This file was automatically generated by genbuilders.go on 2018-05-21T19:54:19+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"github.com/pkg/errors"
	"strings"
)

var _ = errors.Cause

type securityRequirementMarshalProxy struct {
	Schemes map[string][]string `json:""`
}

type securityRequirementUnmarshalProxy struct {
}

func (v *securityRequirement) MarshalJSON() ([]byte, error) {
	var proxy securityRequirementMarshalProxy
	proxy.Schemes = v.schemes
	return json.Marshal(proxy)
}

func (v *securityRequirement) UnmarshalJSON(data []byte) error {
	var proxy securityRequirementUnmarshalProxy
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	return nil
}

func (v *securityRequirement) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "schemes":
		target = v.schemes
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
