package openapi

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"github.com/pkg/errors"
)

var _ = errors.Cause

// XMLBuilder is used to build an instance of XML. The user must
// call `Build()` after providing all the necessary information to
// build an instance of XML
type XMLBuilder struct {
	target *xml
}

// MustBuild is a convenience function for those time when you know that
// the result of the builder must be successful
func (b *XMLBuilder) MustBuild(options ...Option) XML {
	v, err := b.Build()
	if err != nil {
		panic(err)
	}
	return v
}

// Build finalizes the building process for XML and returns the result
func (b *XMLBuilder) Build(options ...Option) (XML, error) {
	validate := true
	for _, option := range options {
		switch option.Name() {
		case optkeyValidate:
			validate = option.Value().(bool)
		}
	}
	if validate {
		if err := b.target.Validate(false); err != nil {
			return nil, errors.Wrap(err, `validation failed`)
		}
	}
	return b.target, nil
}

// NewXML creates a new builder object for XML
func NewXML() *XMLBuilder {
	return &XMLBuilder{
		target: &xml{},
	}
}

// Name sets the name field for object XML.
func (b *XMLBuilder) Name(v string) *XMLBuilder {
	b.target.name = v
	return b
}

// Namespace sets the namespace field for object XML.
func (b *XMLBuilder) Namespace(v string) *XMLBuilder {
	b.target.namespace = v
	return b
}

// Prefix sets the prefix field for object XML.
func (b *XMLBuilder) Prefix(v string) *XMLBuilder {
	b.target.prefix = v
	return b
}

// Attribute sets the attribute field for object XML.
func (b *XMLBuilder) Attribute(v bool) *XMLBuilder {
	b.target.attribute = v
	return b
}

// Wrapped sets the wrapped field for object XML.
func (b *XMLBuilder) Wrapped(v bool) *XMLBuilder {
	b.target.wrapped = v
	return b
}

// Reference sets the $ref (reference) field for object XML.
func (b *XMLBuilder) Reference(v string) *XMLBuilder {
	b.target.reference = v
	return b
}

// Extension sets an arbitrary element (an extension) to the
// object XML. The extension name should start with a "x-"
func (b *XMLBuilder) Extension(name string, value interface{}) *XMLBuilder {
	b.target.extensions[name] = value
	return b
}
