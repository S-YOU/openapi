package openapi

// This file was automatically generated by gentyeps.go on 2018-05-28T21:36:31+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
	"log"
	"strconv"
	"strings"
)

var _ = json.Unmarshal
var _ = log.Printf
var _ = errors.Cause

type operationMarshalProxy struct {
	Reference    string                  `json:"$ref,omitempty"`
	Tags         TagList                 `json:"tags,omitempty"`
	Summary      string                  `json:"summary,omitempty"`
	Description  string                  `json:"description,omitempty"`
	ExternalDocs ExternalDocumentation   `json:"externalDocs,omitempty"`
	OperationID  string                  `json:"operationId,omitempty"`
	Consumes     MIMETypeList            `json:"consumes,omitempty"`
	Produces     MIMETypeList            `json:"produces,omitempty"`
	Parameters   ParameterList           `json:"parameters,omitempty"`
	Responses    Responses               `json:"responses"`
	Schemes      SchemeList              `json:"schemes,omitempty"`
	Deprecated   bool                    `json:"deprecated,omitempty"`
	Security     SecurityRequirementList `json:"security,omitempty"`
}

func (v *operation) MarshalJSON() ([]byte, error) {
	var proxy operationMarshalProxy
	if s := v.reference; len(s) > 0 {
		return []byte(fmt.Sprintf(refOnlyTmpl, strconv.Quote(s))), nil
	}
	proxy.Tags = v.tags
	proxy.Summary = v.summary
	proxy.Description = v.description
	proxy.ExternalDocs = v.externalDocs
	proxy.OperationID = v.operationID
	proxy.Consumes = v.consumes
	proxy.Produces = v.produces
	proxy.Parameters = v.parameters
	proxy.Responses = v.responses
	proxy.Schemes = v.schemes
	proxy.Deprecated = v.deprecated
	proxy.Security = v.security
	buf, err := json.Marshal(proxy)
	if err != nil {
		return nil, errors.Wrap(err, `failed to marshal struct`)
	}
	if len(v.extras) > 0 {
		extrasBuf, err := json.Marshal(v.extras)
		if err != nil || len(extrasBuf) <= 2 {
			return nil, errors.Wrap(err, `failed to marshal struct (extras)`)
		}
		buf = append(append(buf[:len(buf)-1], ','), extrasBuf[1:]...)
	}
	return buf, nil
}

func (v *operation) UnmarshalJSON(data []byte) error {
	var proxy map[string]json.RawMessage
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	if raw := proxy["$ref"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.reference); err != nil {
			return errors.Wrap(err, `failed to unmarshal $ref`)
		}
		return nil
	}

	if raw := proxy["tags"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.tags); err != nil {
			return errors.Wrap(err, `failed to unmarshal field tags`)
		}
		delete(proxy, "tags")
	}

	if raw := proxy["summary"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.summary); err != nil {
			return errors.Wrap(err, `failed to unmarshal field summary`)
		}
		delete(proxy, "summary")
	}

	if raw := proxy["description"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.description); err != nil {
			return errors.Wrap(err, `failed to unmarshal field description`)
		}
		delete(proxy, "description")
	}

	if raw := proxy["externalDocs"]; len(raw) > 0 {
		var decoded externalDocumentation
		if err := json.Unmarshal(raw, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field ExternalDocs`)
		}

		v.externalDocs = &decoded
		delete(proxy, "externalDocs")
	}

	if raw := proxy["operationId"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.operationID); err != nil {
			return errors.Wrap(err, `failed to unmarshal field operationId`)
		}
		delete(proxy, "operationId")
	}

	if raw := proxy["consumes"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.consumes); err != nil {
			return errors.Wrap(err, `failed to unmarshal field consumes`)
		}
		delete(proxy, "consumes")
	}

	if raw := proxy["produces"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.produces); err != nil {
			return errors.Wrap(err, `failed to unmarshal field produces`)
		}
		delete(proxy, "produces")
	}

	if raw := proxy["parameters"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.parameters); err != nil {
			return errors.Wrap(err, `failed to unmarshal field parameters`)
		}
		delete(proxy, "parameters")
	}

	if raw := proxy["responses"]; len(raw) > 0 {
		var decoded responses
		if err := json.Unmarshal(raw, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Responses`)
		}

		v.responses = &decoded
		delete(proxy, "responses")
	}

	if raw := proxy["schemes"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.schemes); err != nil {
			return errors.Wrap(err, `failed to unmarshal field schemes`)
		}
		delete(proxy, "schemes")
	}

	if raw := proxy["deprecated"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.deprecated); err != nil {
			return errors.Wrap(err, `failed to unmarshal field deprecated`)
		}
		delete(proxy, "deprecated")
	}

	if raw := proxy["security"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.security); err != nil {
			return errors.Wrap(err, `failed to unmarshal field security`)
		}
		delete(proxy, "security")
	}

	for name, raw := range proxy {
		if strings.HasPrefix(name, `x-`) {
			if v.extras == nil {
				v.extras = Extensions{}
			}
			v.extras[name] = raw
		}
	}
	return nil
}

func (v *operation) Resolve(resolver *Resolver) error {
	if v.IsUnresolved() {

		resolved, err := resolver.Resolve(v.Reference())
		if err != nil {
			return errors.Wrapf(err, `failed to resolve reference %s`, v.Reference())
		}
		asserted, ok := resolved.(*operation)
		if !ok {
			return errors.Wrapf(err, `expected resolved reference to be of type Operation, but got %T`, resolved)
		}
		mutator := MutateOperation(v)
		for iter := asserted.Tags(); iter.Next(); {
			item := iter.Item()
			mutator.Tag(item)
		}
		mutator.Summary(asserted.Summary())
		mutator.Description(asserted.Description())
		mutator.ExternalDocs(asserted.ExternalDocs())
		mutator.OperationID(asserted.OperationID())
		for iter := asserted.Consumes(); iter.Next(); {
			item := iter.Item()
			mutator.Consume(item)
		}
		for iter := asserted.Produces(); iter.Next(); {
			item := iter.Item()
			mutator.Produce(item)
		}
		for iter := asserted.Parameters(); iter.Next(); {
			item := iter.Item()
			mutator.Parameter(item)
		}
		mutator.Responses(asserted.Responses())
		for iter := asserted.Schemes(); iter.Next(); {
			item := iter.Item()
			mutator.Scheme(item)
		}
		mutator.Deprecated(asserted.Deprecated())
		for iter := asserted.Security(); iter.Next(); {
			item := iter.Item()
			mutator.Security(item)
		}
		if err := mutator.Do(); err != nil {
			return errors.Wrap(err, `failed to mutate`)
		}
		v.resolved = true
	}
	if v.tags != nil {
		if err := v.tags.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Tags`)
		}
	}
	if v.externalDocs != nil {
		if err := v.externalDocs.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve ExternalDocs`)
		}
	}
	if v.consumes != nil {
		if err := v.consumes.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Consumes`)
		}
	}
	if v.produces != nil {
		if err := v.produces.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Produces`)
		}
	}
	if v.parameters != nil {
		if err := v.parameters.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Parameters`)
		}
	}
	if v.responses != nil {
		if err := v.responses.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Responses`)
		}
	}
	if v.schemes != nil {
		if err := v.schemes.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Schemes`)
		}
	}
	if v.security != nil {
		if err := v.security.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Security`)
		}
	}
	return nil
}

func (v *operation) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "tags":
		target = v.tags
	case "summary":
		target = v.summary
	case "description":
		target = v.description
	case "externalDocs":
		target = v.externalDocs
	case "operationId":
		target = v.operationID
	case "consumes":
		target = v.consumes
	case "produces":
		target = v.produces
	case "parameters":
		target = v.parameters
	case "responses":
		target = v.responses
	case "schemes":
		target = v.schemes
	case "deprecated":
		target = v.deprecated
	case "security":
		target = v.security
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
