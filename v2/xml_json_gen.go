package openapi

// This file was automatically generated by gentyeps.go on 2018-05-28T16:03:22+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"github.com/pkg/errors"
	"log"
	"strings"
)

var _ = log.Printf
var _ = json.Unmarshal
var _ = errors.Cause

type xmlMarshalProxy struct {
	Reference string `json:"$ref,omitempty"`
	Name      string `json:"name,omitempty"`
	Namespace string `json:"namespace,omitempty"`
	Prefix    string `json:"prefix,omitempty"`
	Attribute bool   `json:"attribute,omitempty"`
	Wrapped   bool   `json:"wrapped,omitempty"`
}

type xmlUnmarshalProxy struct {
	Reference string `json:"$ref,omitempty"`
	Name      string `json:"name,omitempty"`
	Namespace string `json:"namespace,omitempty"`
	Prefix    string `json:"prefix,omitempty"`
	Attribute bool   `json:"attribute,omitempty"`
	Wrapped   bool   `json:"wrapped,omitempty"`
}

func (v *xml) MarshalJSON() ([]byte, error) {
	var proxy xmlMarshalProxy
	if len(v.reference) > 0 {
		proxy.Reference = v.reference
		return json.Marshal(proxy)
	}
	proxy.Name = v.name
	proxy.Namespace = v.namespace
	proxy.Prefix = v.prefix
	proxy.Attribute = v.attribute
	proxy.Wrapped = v.wrapped
	return json.Marshal(proxy)
}

func (v *xml) UnmarshalJSON(data []byte) error {
	var proxy xmlUnmarshalProxy
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	if len(proxy.Reference) > 0 {
		v.reference = proxy.Reference
		return nil
	}
	v.name = proxy.Name
	v.namespace = proxy.Namespace
	v.prefix = proxy.Prefix
	v.attribute = proxy.Attribute
	v.wrapped = proxy.Wrapped
	return nil
}

func (v *xml) Resolve(resolver *Resolver) error {
	if v.IsUnresolved() {

		resolved, err := resolver.Resolve(v.Reference())
		if err != nil {
			return errors.Wrapf(err, `failed to resolve reference %s`, v.Reference())
		}
		asserted, ok := resolved.(*xml)
		if !ok {
			return errors.Wrapf(err, `expected resolved reference to be of type XML, but got %T`, resolved)
		}
		mutator := MutateXML(v)
		mutator.Name(asserted.Name())
		mutator.Namespace(asserted.Namespace())
		mutator.Prefix(asserted.Prefix())
		mutator.Attribute(asserted.Attribute())
		mutator.Wrapped(asserted.Wrapped())
		if err := mutator.Do(); err != nil {
			return errors.Wrap(err, `failed to mutate`)
		}
		v.resolved = true
	}
	return nil
}

func (v *xml) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "name":
		target = v.name
	case "namespace":
		target = v.namespace
	case "prefix":
		target = v.prefix
	case "attribute":
		target = v.attribute
	case "wrapped":
		target = v.wrapped
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
