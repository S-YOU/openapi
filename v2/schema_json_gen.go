package openapi

// This file was automatically generated by gentyeps.go on 2018-05-28T21:36:31+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
	"log"
	"strconv"
	"strings"
)

var _ = json.Unmarshal
var _ = log.Printf
var _ = errors.Cause

type schemaMarshalProxy struct {
	Reference           string                `json:"$ref,omitempty"`
	Type                PrimitiveType         `json:"type,omitempty"`
	Format              string                `json:"format,omitempty"`
	Title               string                `json:"title,omitempty"`
	MultipleOf          float64               `json:"multipleOf,omitempty"`
	Maximum             float64               `json:"maximum,omitempty"`
	ExclusiveMaximum    float64               `json:"exclusiveMaximum,omitempty"`
	Minimum             float64               `json:"minimum,omitempty"`
	ExclusiveMinimum    float64               `json:"exclusiveMinimum,omitempty"`
	MaxLength           int                   `json:"maxLength,omitempty"`
	MinLength           int                   `json:"minLength,omitempty"`
	Pattern             string                `json:"pattern,omitempty"`
	MaxItems            int                   `json:"maxItems,omitempty"`
	MinItems            int                   `json:"minItems,omitempty"`
	UniqueItems         bool                  `json:"uniqueItems,omitempty"`
	MaxProperties       int                   `json:"maxProperties,omitempty"`
	MinProperties       int                   `json:"minProperties,omitempty"`
	Required            StringList            `json:"required,omitempty"`
	Enum                InterfaceList         `json:"enum,omitempty"`
	AllOf               SchemaList            `json:"allOf,omitempty"`
	Items               Schema                `json:"items,omitempty"`
	Properties          SchemaMap             `json:"properties,omitempty"`
	AdditionaProperties SchemaMap             `json:"additionalProperties,omitempty"`
	DefaultValue        interface{}           `json:"default,omitempty"`
	Discriminator       string                `json:"discriminator,omitempty"`
	ReadOnly            bool                  `json:"readOnly,omitempty"`
	ExternalDocs        ExternalDocumentation `json:"externalDocs,omitempty"`
	Example             interface{}           `json:"example,omitempty"`
	Deprecated          bool                  `json:"deprecated,omitempty"`
	XML                 XML                   `json:"xml,omitempty"`
}

func (v *schema) MarshalJSON() ([]byte, error) {
	var proxy schemaMarshalProxy
	if s := v.reference; len(s) > 0 {
		return []byte(fmt.Sprintf(refOnlyTmpl, strconv.Quote(s))), nil
	}
	proxy.Type = v.typ
	proxy.Format = v.format
	proxy.Title = v.title
	proxy.MultipleOf = v.multipleOf
	proxy.Maximum = v.maximum
	proxy.ExclusiveMaximum = v.exclusiveMaximum
	proxy.Minimum = v.minimum
	proxy.ExclusiveMinimum = v.exclusiveMinimum
	proxy.MaxLength = v.maxLength
	proxy.MinLength = v.minLength
	proxy.Pattern = v.pattern
	proxy.MaxItems = v.maxItems
	proxy.MinItems = v.minItems
	proxy.UniqueItems = v.uniqueItems
	proxy.MaxProperties = v.maxProperties
	proxy.MinProperties = v.minProperties
	proxy.Required = v.required
	proxy.Enum = v.enum
	proxy.AllOf = v.allOf
	proxy.Items = v.items
	proxy.Properties = v.properties
	proxy.AdditionaProperties = v.additionaProperties
	proxy.DefaultValue = v.defaultValue
	proxy.Discriminator = v.discriminator
	proxy.ReadOnly = v.readOnly
	proxy.ExternalDocs = v.externalDocs
	proxy.Example = v.example
	proxy.Deprecated = v.deprecated
	proxy.XML = v.xml
	buf, err := json.Marshal(proxy)
	if err != nil {
		return nil, errors.Wrap(err, `failed to marshal struct`)
	}
	if len(v.extras) > 0 {
		extrasBuf, err := json.Marshal(v.extras)
		if err != nil || len(extrasBuf) <= 2 {
			return nil, errors.Wrap(err, `failed to marshal struct (extras)`)
		}
		buf = append(append(buf[:len(buf)-1], ','), extrasBuf[1:]...)
	}
	return buf, nil
}

func (v *schema) UnmarshalJSON(data []byte) error {
	var proxy map[string]json.RawMessage
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	if raw := proxy["$ref"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.reference); err != nil {
			return errors.Wrap(err, `failed to unmarshal $ref`)
		}
		return nil
	}

	if raw := proxy["type"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.typ); err != nil {
			return errors.Wrap(err, `failed to unmarshal field type`)
		}
		delete(proxy, "type")
	}

	if raw := proxy["format"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.format); err != nil {
			return errors.Wrap(err, `failed to unmarshal field format`)
		}
		delete(proxy, "format")
	}

	if raw := proxy["title"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.title); err != nil {
			return errors.Wrap(err, `failed to unmarshal field title`)
		}
		delete(proxy, "title")
	}

	if raw := proxy["multipleOf"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.multipleOf); err != nil {
			return errors.Wrap(err, `failed to unmarshal field multipleOf`)
		}
		delete(proxy, "multipleOf")
	}

	if raw := proxy["maximum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.maximum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field maximum`)
		}
		delete(proxy, "maximum")
	}

	if raw := proxy["exclusiveMaximum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.exclusiveMaximum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field exclusiveMaximum`)
		}
		delete(proxy, "exclusiveMaximum")
	}

	if raw := proxy["minimum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.minimum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field minimum`)
		}
		delete(proxy, "minimum")
	}

	if raw := proxy["exclusiveMinimum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.exclusiveMinimum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field exclusiveMinimum`)
		}
		delete(proxy, "exclusiveMinimum")
	}

	if raw := proxy["maxLength"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.maxLength); err != nil {
			return errors.Wrap(err, `failed to unmarshal field maxLength`)
		}
		delete(proxy, "maxLength")
	}

	if raw := proxy["minLength"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.minLength); err != nil {
			return errors.Wrap(err, `failed to unmarshal field minLength`)
		}
		delete(proxy, "minLength")
	}

	if raw := proxy["pattern"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.pattern); err != nil {
			return errors.Wrap(err, `failed to unmarshal field pattern`)
		}
		delete(proxy, "pattern")
	}

	if raw := proxy["maxItems"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.maxItems); err != nil {
			return errors.Wrap(err, `failed to unmarshal field maxItems`)
		}
		delete(proxy, "maxItems")
	}

	if raw := proxy["minItems"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.minItems); err != nil {
			return errors.Wrap(err, `failed to unmarshal field minItems`)
		}
		delete(proxy, "minItems")
	}

	if raw := proxy["uniqueItems"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.uniqueItems); err != nil {
			return errors.Wrap(err, `failed to unmarshal field uniqueItems`)
		}
		delete(proxy, "uniqueItems")
	}

	if raw := proxy["maxProperties"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.maxProperties); err != nil {
			return errors.Wrap(err, `failed to unmarshal field maxProperties`)
		}
		delete(proxy, "maxProperties")
	}

	if raw := proxy["minProperties"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.minProperties); err != nil {
			return errors.Wrap(err, `failed to unmarshal field minProperties`)
		}
		delete(proxy, "minProperties")
	}

	if raw := proxy["required"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.required); err != nil {
			return errors.Wrap(err, `failed to unmarshal field required`)
		}
		delete(proxy, "required")
	}

	if raw := proxy["enum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.enum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field enum`)
		}
		delete(proxy, "enum")
	}

	if raw := proxy["allOf"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.allOf); err != nil {
			return errors.Wrap(err, `failed to unmarshal field allOf`)
		}
		delete(proxy, "allOf")
	}

	if raw := proxy["items"]; len(raw) > 0 {
		var decoded schema
		if err := json.Unmarshal(raw, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Items`)
		}

		v.items = &decoded
		delete(proxy, "items")
	}

	if raw := proxy["properties"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.properties); err != nil {
			return errors.Wrap(err, `failed to unmarshal field properties`)
		}
		delete(proxy, "properties")
	}

	if raw := proxy["additionalProperties"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.additionaProperties); err != nil {
			return errors.Wrap(err, `failed to unmarshal field additionalProperties`)
		}
		delete(proxy, "additionalProperties")
	}

	if raw := proxy["default"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.defaultValue); err != nil {
			return errors.Wrap(err, `failed to unmarshal field default`)
		}
		delete(proxy, "default")
	}

	if raw := proxy["discriminator"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.discriminator); err != nil {
			return errors.Wrap(err, `failed to unmarshal field discriminator`)
		}
		delete(proxy, "discriminator")
	}

	if raw := proxy["readOnly"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.readOnly); err != nil {
			return errors.Wrap(err, `failed to unmarshal field readOnly`)
		}
		delete(proxy, "readOnly")
	}

	if raw := proxy["externalDocs"]; len(raw) > 0 {
		var decoded externalDocumentation
		if err := json.Unmarshal(raw, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field ExternalDocs`)
		}

		v.externalDocs = &decoded
		delete(proxy, "externalDocs")
	}

	if raw := proxy["example"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.example); err != nil {
			return errors.Wrap(err, `failed to unmarshal field example`)
		}
		delete(proxy, "example")
	}

	if raw := proxy["deprecated"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.deprecated); err != nil {
			return errors.Wrap(err, `failed to unmarshal field deprecated`)
		}
		delete(proxy, "deprecated")
	}

	if raw := proxy["xml"]; len(raw) > 0 {
		var decoded xml
		if err := json.Unmarshal(raw, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field XML`)
		}

		v.xml = &decoded
		delete(proxy, "xml")
	}

	for name, raw := range proxy {
		if strings.HasPrefix(name, `x-`) {
			if v.extras == nil {
				v.extras = Extensions{}
			}
			v.extras[name] = raw
		}
	}
	return nil
}

func (v *schema) Resolve(resolver *Resolver) error {
	if v.IsUnresolved() {

		resolved, err := resolver.Resolve(v.Reference())
		if err != nil {
			return errors.Wrapf(err, `failed to resolve reference %s`, v.Reference())
		}
		asserted, ok := resolved.(*schema)
		if !ok {
			return errors.Wrapf(err, `expected resolved reference to be of type Schema, but got %T`, resolved)
		}
		mutator := MutateSchema(v)
		mutator.Name(asserted.Name())
		mutator.Type(asserted.Type())
		mutator.Format(asserted.Format())
		mutator.Title(asserted.Title())
		mutator.MultipleOf(asserted.MultipleOf())
		mutator.Maximum(asserted.Maximum())
		mutator.ExclusiveMaximum(asserted.ExclusiveMaximum())
		mutator.Minimum(asserted.Minimum())
		mutator.ExclusiveMinimum(asserted.ExclusiveMinimum())
		mutator.MaxLength(asserted.MaxLength())
		mutator.MinLength(asserted.MinLength())
		mutator.Pattern(asserted.Pattern())
		mutator.MaxItems(asserted.MaxItems())
		mutator.MinItems(asserted.MinItems())
		mutator.UniqueItems(asserted.UniqueItems())
		mutator.MaxProperties(asserted.MaxProperties())
		mutator.MinProperties(asserted.MinProperties())
		for iter := asserted.Required(); iter.Next(); {
			item := iter.Item()
			mutator.Required(item)
		}
		for iter := asserted.Enum(); iter.Next(); {
			item := iter.Item()
			mutator.Enum(item)
		}
		for iter := asserted.AllOf(); iter.Next(); {
			item := iter.Item()
			mutator.AllOf(item)
		}
		mutator.Items(asserted.Items())
		for iter := asserted.Properties(); iter.Next(); {
			key, item := iter.Item()
			mutator.Property(key, item)
		}
		for iter := asserted.AdditionaProperties(); iter.Next(); {
			key, item := iter.Item()
			mutator.AdditionaProperty(key, item)
		}
		mutator.DefaultValue(asserted.DefaultValue())
		mutator.Discriminator(asserted.Discriminator())
		mutator.ReadOnly(asserted.ReadOnly())
		mutator.ExternalDocs(asserted.ExternalDocs())
		mutator.Example(asserted.Example())
		mutator.Deprecated(asserted.Deprecated())
		mutator.XML(asserted.XML())
		if err := mutator.Do(); err != nil {
			return errors.Wrap(err, `failed to mutate`)
		}
		v.resolved = true
	}
	if v.required != nil {
		if err := v.required.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Required`)
		}
	}
	if v.enum != nil {
		if err := v.enum.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Enum`)
		}
	}
	if v.allOf != nil {
		if err := v.allOf.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve AllOf`)
		}
	}
	if v.items != nil {
		if err := v.items.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Items`)
		}
	}
	if v.properties != nil {
		if err := v.properties.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Properties`)
		}
	}
	if v.additionaProperties != nil {
		if err := v.additionaProperties.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve AdditionaProperties`)
		}
	}
	if v.externalDocs != nil {
		if err := v.externalDocs.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve ExternalDocs`)
		}
	}
	if v.xml != nil {
		if err := v.xml.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve XML`)
		}
	}
	return nil
}

func (v *schema) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "type":
		target = v.typ
	case "format":
		target = v.format
	case "title":
		target = v.title
	case "multipleOf":
		target = v.multipleOf
	case "maximum":
		target = v.maximum
	case "exclusiveMaximum":
		target = v.exclusiveMaximum
	case "minimum":
		target = v.minimum
	case "exclusiveMinimum":
		target = v.exclusiveMinimum
	case "maxLength":
		target = v.maxLength
	case "minLength":
		target = v.minLength
	case "pattern":
		target = v.pattern
	case "maxItems":
		target = v.maxItems
	case "minItems":
		target = v.minItems
	case "uniqueItems":
		target = v.uniqueItems
	case "maxProperties":
		target = v.maxProperties
	case "minProperties":
		target = v.minProperties
	case "required":
		target = v.required
	case "enum":
		target = v.enum
	case "allOf":
		target = v.allOf
	case "items":
		target = v.items
	case "properties":
		target = v.properties
	case "additionalProperties":
		target = v.additionaProperties
	case "default":
		target = v.defaultValue
	case "discriminator":
		target = v.discriminator
	case "readOnly":
		target = v.readOnly
	case "externalDocs":
		target = v.externalDocs
	case "example":
		target = v.example
	case "deprecated":
		target = v.deprecated
	case "xml":
		target = v.xml
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
