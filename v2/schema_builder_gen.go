package openapi

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"github.com/pkg/errors"
)

var _ = errors.Cause

// SchemaBuilder is used to build an instance of Schema. The user must
// call `Do()` after providing all the necessary information to
// build an instance of Schema
type SchemaBuilder struct {
	target *schema
}

// Do finalizes the building process for Schema and returns the result
func (b *SchemaBuilder) Do(options ...Option) (Schema, error) {
	validate := true
	for _, option := range options {
		switch option.Name() {
		case optkeyValidate:
			validate = option.Value().(bool)
		}
	}
	if validate {
		if err := b.target.Validate(false); err != nil {
			return nil, errors.Wrap(err, `validation failed`)
		}
	}
	return b.target, nil
}

// NewSchema creates a new builder object for Schema
func NewSchema() *SchemaBuilder {
	return &SchemaBuilder{
		target: &schema{},
	}
}

// Type sets the typ field for object Schema.
func (b *SchemaBuilder) Type(v PrimitiveType) *SchemaBuilder {
	b.target.typ = v
	return b
}

// Format sets the format field for object Schema.
func (b *SchemaBuilder) Format(v string) *SchemaBuilder {
	b.target.format = v
	return b
}

// Title sets the title field for object Schema.
func (b *SchemaBuilder) Title(v string) *SchemaBuilder {
	b.target.title = v
	return b
}

// MultipleOf sets the multipleOf field for object Schema.
func (b *SchemaBuilder) MultipleOf(v float64) *SchemaBuilder {
	b.target.multipleOf = &v
	return b
}

// Maximum sets the maximum field for object Schema.
func (b *SchemaBuilder) Maximum(v float64) *SchemaBuilder {
	b.target.maximum = &v
	return b
}

// ExclusiveMaximum sets the exclusiveMaximum field for object Schema.
func (b *SchemaBuilder) ExclusiveMaximum(v float64) *SchemaBuilder {
	b.target.exclusiveMaximum = &v
	return b
}

// Minimum sets the minimum field for object Schema.
func (b *SchemaBuilder) Minimum(v float64) *SchemaBuilder {
	b.target.minimum = &v
	return b
}

// ExclusiveMinimum sets the exclusiveMinimum field for object Schema.
func (b *SchemaBuilder) ExclusiveMinimum(v float64) *SchemaBuilder {
	b.target.exclusiveMinimum = &v
	return b
}

// MaxLength sets the maxLength field for object Schema.
func (b *SchemaBuilder) MaxLength(v int) *SchemaBuilder {
	b.target.maxLength = &v
	return b
}

// MinLength sets the minLength field for object Schema.
func (b *SchemaBuilder) MinLength(v int) *SchemaBuilder {
	b.target.minLength = &v
	return b
}

// Pattern sets the pattern field for object Schema.
func (b *SchemaBuilder) Pattern(v string) *SchemaBuilder {
	b.target.pattern = v
	return b
}

// MaxItems sets the maxItems field for object Schema.
func (b *SchemaBuilder) MaxItems(v int) *SchemaBuilder {
	b.target.maxItems = &v
	return b
}

// MinItems sets the minItems field for object Schema.
func (b *SchemaBuilder) MinItems(v int) *SchemaBuilder {
	b.target.minItems = &v
	return b
}

// UniqueItems sets the uniqueItems field for object Schema.
func (b *SchemaBuilder) UniqueItems(v bool) *SchemaBuilder {
	b.target.uniqueItems = v
	return b
}

// MaxProperties sets the maxProperties field for object Schema.
func (b *SchemaBuilder) MaxProperties(v int) *SchemaBuilder {
	b.target.maxProperties = &v
	return b
}

// MinProperties sets the minProperties field for object Schema.
func (b *SchemaBuilder) MinProperties(v int) *SchemaBuilder {
	b.target.minProperties = &v
	return b
}

// Required sets the required field for object Schema.
func (b *SchemaBuilder) Required(v ...string) *SchemaBuilder {
	b.target.required = v
	return b
}

// Enum sets the enum field for object Schema.
func (b *SchemaBuilder) Enum(v ...interface{}) *SchemaBuilder {
	b.target.enum = v
	return b
}

// AllOf sets the allOf field for object Schema.
func (b *SchemaBuilder) AllOf(v ...Schema) *SchemaBuilder {
	b.target.allOf = v
	return b
}

// Items sets the items field for object Schema.
func (b *SchemaBuilder) Items(v Schema) *SchemaBuilder {
	b.target.items = v
	return b
}

// AdditionaProperties sets the additionaProperties field for object Schema.
func (b *SchemaBuilder) AdditionaProperties(v SchemaMap) *SchemaBuilder {
	b.target.additionaProperties = v
	return b
}

// Default sets the defaultValue field for object Schema.
func (b *SchemaBuilder) Default(v interface{}) *SchemaBuilder {
	b.target.defaultValue = v
	return b
}

// Discriminator sets the discriminator field for object Schema.
func (b *SchemaBuilder) Discriminator(v string) *SchemaBuilder {
	b.target.discriminator = v
	return b
}

// ReadOnly sets the readOnly field for object Schema.
func (b *SchemaBuilder) ReadOnly(v bool) *SchemaBuilder {
	b.target.readOnly = v
	return b
}

// ExternalDocs sets the externalDocs field for object Schema.
func (b *SchemaBuilder) ExternalDocs(v ExternalDocumentation) *SchemaBuilder {
	b.target.externalDocs = v
	return b
}

// Example sets the example field for object Schema.
func (b *SchemaBuilder) Example(v interface{}) *SchemaBuilder {
	b.target.example = v
	return b
}

// Deprecated sets the deprecated field for object Schema.
func (b *SchemaBuilder) Deprecated(v bool) *SchemaBuilder {
	b.target.deprecated = v
	return b
}

// XML sets the xml field for object Schema.
func (b *SchemaBuilder) XML(v XML) *SchemaBuilder {
	b.target.xml = v
	return b
}

// Reference sets the $ref (reference) field for object Schema.
func (b *SchemaBuilder) Reference(v string) *SchemaBuilder {
	b.target.reference = v
	return b
}
