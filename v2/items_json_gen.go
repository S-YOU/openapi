package openapi

// This file was automatically generated by gentyeps.go on 2018-05-28T21:36:31+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
	"log"
	"strconv"
	"strings"
)

var _ = json.Unmarshal
var _ = log.Printf
var _ = errors.Cause

type itemsMarshalProxy struct {
	Reference        string           `json:"$ref,omitempty"`
	Type             string           `json:"type,omitempty"`
	Format           string           `json:"format,omitempty"`
	Items            Items            `json:"items,omitempty"`
	CollectionFormat CollectionFormat `json:"collectionFormat,omitempty"`
	DefaultValue     interface{}      `json:"default,omitempty"`
	Maximum          float64          `json:"maximum,omitempty"`
	ExclusiveMaximum float64          `json:"exclusiveMaximum,omitempty"`
	Minimum          float64          `json:"minimum,omitempty"`
	ExclusiveMinimum float64          `json:"exclusiveMinimum,omitempty"`
	MaxLength        int              `json:"maxLength,omitempty"`
	MinLength        int              `json:"minLength,omitempty"`
	Pattern          string           `json:"pattern,omitempty"`
	MaxItems         int              `json:"maxItems,omitempty"`
	MinItems         int              `json:"minItems,omitempty"`
	UniqueItems      bool             `json:"uniqueItems,omitempty"`
	Enum             InterfaceList    `json:"enum,omitempty"`
	MultipleOf       float64          `json:"multipleOf,omitempty"`
}

func (v *items) MarshalJSON() ([]byte, error) {
	var proxy itemsMarshalProxy
	if s := v.reference; len(s) > 0 {
		return []byte(fmt.Sprintf(refOnlyTmpl, strconv.Quote(s))), nil
	}
	proxy.Type = v.typ
	proxy.Format = v.format
	proxy.Items = v.items
	proxy.CollectionFormat = v.collectionFormat
	proxy.DefaultValue = v.defaultValue
	proxy.Maximum = v.maximum
	proxy.ExclusiveMaximum = v.exclusiveMaximum
	proxy.Minimum = v.minimum
	proxy.ExclusiveMinimum = v.exclusiveMinimum
	proxy.MaxLength = v.maxLength
	proxy.MinLength = v.minLength
	proxy.Pattern = v.pattern
	proxy.MaxItems = v.maxItems
	proxy.MinItems = v.minItems
	proxy.UniqueItems = v.uniqueItems
	proxy.Enum = v.enum
	proxy.MultipleOf = v.multipleOf
	buf, err := json.Marshal(proxy)
	if err != nil {
		return nil, errors.Wrap(err, `failed to marshal struct`)
	}
	if len(v.extras) > 0 {
		extrasBuf, err := json.Marshal(v.extras)
		if err != nil || len(extrasBuf) <= 2 {
			return nil, errors.Wrap(err, `failed to marshal struct (extras)`)
		}
		buf = append(append(buf[:len(buf)-1], ','), extrasBuf[1:]...)
	}
	return buf, nil
}

func (v *items) UnmarshalJSON(data []byte) error {
	var proxy map[string]json.RawMessage
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	if raw := proxy["$ref"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.reference); err != nil {
			return errors.Wrap(err, `failed to unmarshal $ref`)
		}
		return nil
	}

	if raw := proxy["type"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.typ); err != nil {
			return errors.Wrap(err, `failed to unmarshal field type`)
		}
		delete(proxy, "type")
	}

	if raw := proxy["format"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.format); err != nil {
			return errors.Wrap(err, `failed to unmarshal field format`)
		}
		delete(proxy, "format")
	}

	if raw := proxy["items"]; len(raw) > 0 {
		var decoded items
		if err := json.Unmarshal(raw, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Items`)
		}

		v.items = &decoded
		delete(proxy, "items")
	}

	if raw := proxy["collectionFormat"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.collectionFormat); err != nil {
			return errors.Wrap(err, `failed to unmarshal field collectionFormat`)
		}
		delete(proxy, "collectionFormat")
	}

	if raw := proxy["default"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.defaultValue); err != nil {
			return errors.Wrap(err, `failed to unmarshal field default`)
		}
		delete(proxy, "default")
	}

	if raw := proxy["maximum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.maximum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field maximum`)
		}
		delete(proxy, "maximum")
	}

	if raw := proxy["exclusiveMaximum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.exclusiveMaximum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field exclusiveMaximum`)
		}
		delete(proxy, "exclusiveMaximum")
	}

	if raw := proxy["minimum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.minimum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field minimum`)
		}
		delete(proxy, "minimum")
	}

	if raw := proxy["exclusiveMinimum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.exclusiveMinimum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field exclusiveMinimum`)
		}
		delete(proxy, "exclusiveMinimum")
	}

	if raw := proxy["maxLength"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.maxLength); err != nil {
			return errors.Wrap(err, `failed to unmarshal field maxLength`)
		}
		delete(proxy, "maxLength")
	}

	if raw := proxy["minLength"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.minLength); err != nil {
			return errors.Wrap(err, `failed to unmarshal field minLength`)
		}
		delete(proxy, "minLength")
	}

	if raw := proxy["pattern"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.pattern); err != nil {
			return errors.Wrap(err, `failed to unmarshal field pattern`)
		}
		delete(proxy, "pattern")
	}

	if raw := proxy["maxItems"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.maxItems); err != nil {
			return errors.Wrap(err, `failed to unmarshal field maxItems`)
		}
		delete(proxy, "maxItems")
	}

	if raw := proxy["minItems"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.minItems); err != nil {
			return errors.Wrap(err, `failed to unmarshal field minItems`)
		}
		delete(proxy, "minItems")
	}

	if raw := proxy["uniqueItems"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.uniqueItems); err != nil {
			return errors.Wrap(err, `failed to unmarshal field uniqueItems`)
		}
		delete(proxy, "uniqueItems")
	}

	if raw := proxy["enum"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.enum); err != nil {
			return errors.Wrap(err, `failed to unmarshal field enum`)
		}
		delete(proxy, "enum")
	}

	if raw := proxy["multipleOf"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.multipleOf); err != nil {
			return errors.Wrap(err, `failed to unmarshal field multipleOf`)
		}
		delete(proxy, "multipleOf")
	}

	for name, raw := range proxy {
		if strings.HasPrefix(name, `x-`) {
			if v.extras == nil {
				v.extras = Extensions{}
			}
			v.extras[name] = raw
		}
	}
	return nil
}

func (v *items) Resolve(resolver *Resolver) error {
	if v.IsUnresolved() {

		resolved, err := resolver.Resolve(v.Reference())
		if err != nil {
			return errors.Wrapf(err, `failed to resolve reference %s`, v.Reference())
		}
		asserted, ok := resolved.(*items)
		if !ok {
			return errors.Wrapf(err, `expected resolved reference to be of type Items, but got %T`, resolved)
		}
		mutator := MutateItems(v)
		mutator.Type(asserted.Type())
		mutator.Format(asserted.Format())
		mutator.Items(asserted.Items())
		mutator.CollectionFormat(asserted.CollectionFormat())
		mutator.DefaultValue(asserted.DefaultValue())
		mutator.Maximum(asserted.Maximum())
		mutator.ExclusiveMaximum(asserted.ExclusiveMaximum())
		mutator.Minimum(asserted.Minimum())
		mutator.ExclusiveMinimum(asserted.ExclusiveMinimum())
		mutator.MaxLength(asserted.MaxLength())
		mutator.MinLength(asserted.MinLength())
		mutator.Pattern(asserted.Pattern())
		mutator.MaxItems(asserted.MaxItems())
		mutator.MinItems(asserted.MinItems())
		mutator.UniqueItems(asserted.UniqueItems())
		for iter := asserted.Enum(); iter.Next(); {
			item := iter.Item()
			mutator.Enum(item)
		}
		mutator.MultipleOf(asserted.MultipleOf())
		if err := mutator.Do(); err != nil {
			return errors.Wrap(err, `failed to mutate`)
		}
		v.resolved = true
	}
	if v.items != nil {
		if err := v.items.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Items`)
		}
	}
	if v.enum != nil {
		if err := v.enum.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Enum`)
		}
	}
	return nil
}

func (v *items) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "type":
		target = v.typ
	case "format":
		target = v.format
	case "items":
		target = v.items
	case "collectionFormat":
		target = v.collectionFormat
	case "default":
		target = v.defaultValue
	case "maximum":
		target = v.maximum
	case "exclusiveMaximum":
		target = v.exclusiveMaximum
	case "minimum":
		target = v.minimum
	case "exclusiveMinimum":
		target = v.exclusiveMinimum
	case "maxLength":
		target = v.maxLength
	case "minLength":
		target = v.minLength
	case "pattern":
		target = v.pattern
	case "maxItems":
		target = v.maxItems
	case "minItems":
		target = v.minItems
	case "uniqueItems":
		target = v.uniqueItems
	case "enum":
		target = v.enum
	case "multipleOf":
		target = v.multipleOf
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
