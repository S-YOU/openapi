package openapi

// This file was automatically generated by gentyeps.go on 2018-05-28T21:36:31+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
	"log"
	"strconv"
	"strings"
)

var _ = json.Unmarshal
var _ = log.Printf
var _ = errors.Cause

type securitySchemeMarshalProxy struct {
	Reference        string    `json:"$ref,omitempty"`
	Type             string    `json:"type"`
	Description      string    `json:"description,omitempty"`
	Name             string    `json:"name,omitempty"`
	In               string    `json:"in,omitempty"`
	Flow             string    `json:"flow,omitempty"`
	AuthorizationURL string    `json:"authorizationUrl,omitempty"`
	TokenURL         string    `json:"tokenUrl,omitempty"`
	Scopes           StringMap `json:"scopes,omitempty"`
}

func (v *securityScheme) MarshalJSON() ([]byte, error) {
	var proxy securitySchemeMarshalProxy
	if s := v.reference; len(s) > 0 {
		return []byte(fmt.Sprintf(refOnlyTmpl, strconv.Quote(s))), nil
	}
	proxy.Type = v.typ
	proxy.Description = v.description
	proxy.Name = v.name
	proxy.In = v.in
	proxy.Flow = v.flow
	proxy.AuthorizationURL = v.authorizationURL
	proxy.TokenURL = v.tokenURL
	proxy.Scopes = v.scopes
	buf, err := json.Marshal(proxy)
	if err != nil {
		return nil, errors.Wrap(err, `failed to marshal struct`)
	}
	if len(v.extras) > 0 {
		extrasBuf, err := json.Marshal(v.extras)
		if err != nil || len(extrasBuf) <= 2 {
			return nil, errors.Wrap(err, `failed to marshal struct (extras)`)
		}
		buf = append(append(buf[:len(buf)-1], ','), extrasBuf[1:]...)
	}
	return buf, nil
}

func (v *securityScheme) UnmarshalJSON(data []byte) error {
	var proxy map[string]json.RawMessage
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	if raw := proxy["$ref"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.reference); err != nil {
			return errors.Wrap(err, `failed to unmarshal $ref`)
		}
		return nil
	}

	if raw := proxy["type"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.typ); err != nil {
			return errors.Wrap(err, `failed to unmarshal field type`)
		}
		delete(proxy, "type")
	}

	if raw := proxy["description"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.description); err != nil {
			return errors.Wrap(err, `failed to unmarshal field description`)
		}
		delete(proxy, "description")
	}

	if raw := proxy["name"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.name); err != nil {
			return errors.Wrap(err, `failed to unmarshal field name`)
		}
		delete(proxy, "name")
	}

	if raw := proxy["in"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.in); err != nil {
			return errors.Wrap(err, `failed to unmarshal field in`)
		}
		delete(proxy, "in")
	}

	if raw := proxy["flow"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.flow); err != nil {
			return errors.Wrap(err, `failed to unmarshal field flow`)
		}
		delete(proxy, "flow")
	}

	if raw := proxy["authorizationUrl"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.authorizationURL); err != nil {
			return errors.Wrap(err, `failed to unmarshal field authorizationUrl`)
		}
		delete(proxy, "authorizationUrl")
	}

	if raw := proxy["tokenUrl"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.tokenURL); err != nil {
			return errors.Wrap(err, `failed to unmarshal field tokenUrl`)
		}
		delete(proxy, "tokenUrl")
	}

	if raw := proxy["scopes"]; len(raw) > 0 {
		if err := json.Unmarshal(raw, &v.scopes); err != nil {
			return errors.Wrap(err, `failed to unmarshal field scopes`)
		}
		delete(proxy, "scopes")
	}

	for name, raw := range proxy {
		if strings.HasPrefix(name, `x-`) {
			if v.extras == nil {
				v.extras = Extensions{}
			}
			v.extras[name] = raw
		}
	}
	return nil
}

func (v *securityScheme) Resolve(resolver *Resolver) error {
	if v.IsUnresolved() {

		resolved, err := resolver.Resolve(v.Reference())
		if err != nil {
			return errors.Wrapf(err, `failed to resolve reference %s`, v.Reference())
		}
		asserted, ok := resolved.(*securityScheme)
		if !ok {
			return errors.Wrapf(err, `expected resolved reference to be of type SecurityScheme, but got %T`, resolved)
		}
		mutator := MutateSecurityScheme(v)
		mutator.Type(asserted.Type())
		mutator.Description(asserted.Description())
		mutator.Name(asserted.Name())
		mutator.In(asserted.In())
		mutator.Flow(asserted.Flow())
		mutator.AuthorizationURL(asserted.AuthorizationURL())
		mutator.TokenURL(asserted.TokenURL())
		for iter := asserted.Scopes(); iter.Next(); {
			key, item := iter.Item()
			mutator.Scope(key, item)
		}
		if err := mutator.Do(); err != nil {
			return errors.Wrap(err, `failed to mutate`)
		}
		v.resolved = true
	}
	if v.scopes != nil {
		if err := v.scopes.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Scopes`)
		}
	}
	return nil
}

func (v *securityScheme) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "type":
		target = v.typ
	case "description":
		target = v.description
	case "name":
		target = v.name
	case "in":
		target = v.in
	case "flow":
		target = v.flow
	case "authorizationUrl":
		target = v.authorizationURL
	case "tokenUrl":
		target = v.tokenURL
	case "scopes":
		target = v.scopes
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
