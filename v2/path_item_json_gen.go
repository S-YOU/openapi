package openapi

// This file was automatically generated by gentyeps.go on 2018-05-28T19:20:54+09:00
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"encoding/json"
	"github.com/pkg/errors"
	"log"
	"strings"
)

var _ = log.Printf
var _ = json.Unmarshal
var _ = errors.Cause

type pathItemMarshalProxy struct {
	Reference  string        `json:"$ref,omitempty"`
	Get        Operation     `json:"get,omitempty"`
	Put        Operation     `json:"put,omitempty"`
	Post       Operation     `json:"post,omitempty"`
	Delete     Operation     `json:"delete,omitempty"`
	Options    Operation     `json:"options,omitempty"`
	Head       Operation     `json:"head,omitempty"`
	Patch      Operation     `json:"patch,omitempty"`
	Parameters ParameterList `json:"parameters,omitempty"`
}

type pathItemUnmarshalProxy struct {
	Reference  string          `json:"$ref,omitempty"`
	Get        json.RawMessage `json:"get,omitempty"`
	Put        json.RawMessage `json:"put,omitempty"`
	Post       json.RawMessage `json:"post,omitempty"`
	Delete     json.RawMessage `json:"delete,omitempty"`
	Options    json.RawMessage `json:"options,omitempty"`
	Head       json.RawMessage `json:"head,omitempty"`
	Patch      json.RawMessage `json:"patch,omitempty"`
	Parameters ParameterList   `json:"parameters,omitempty"`
}

func (v *pathItem) MarshalJSON() ([]byte, error) {
	var proxy pathItemMarshalProxy
	if len(v.reference) > 0 {
		proxy.Reference = v.reference
		return json.Marshal(proxy)
	}
	proxy.Get = v.get
	proxy.Put = v.put
	proxy.Post = v.post
	proxy.Delete = v.delete
	proxy.Options = v.options
	proxy.Head = v.head
	proxy.Patch = v.patch
	proxy.Parameters = v.parameters
	return json.Marshal(proxy)
}

func (v *pathItem) UnmarshalJSON(data []byte) error {
	var proxy pathItemUnmarshalProxy
	if err := json.Unmarshal(data, &proxy); err != nil {
		return err
	}
	if len(proxy.Reference) > 0 {
		v.reference = proxy.Reference
		return nil
	}

	if len(proxy.Get) > 0 {
		var decoded operation
		if err := json.Unmarshal(proxy.Get, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Get`)
		}

		v.get = &decoded
	}

	if len(proxy.Put) > 0 {
		var decoded operation
		if err := json.Unmarshal(proxy.Put, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Put`)
		}

		v.put = &decoded
	}

	if len(proxy.Post) > 0 {
		var decoded operation
		if err := json.Unmarshal(proxy.Post, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Post`)
		}

		v.post = &decoded
	}

	if len(proxy.Delete) > 0 {
		var decoded operation
		if err := json.Unmarshal(proxy.Delete, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Delete`)
		}

		v.delete = &decoded
	}

	if len(proxy.Options) > 0 {
		var decoded operation
		if err := json.Unmarshal(proxy.Options, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Options`)
		}

		v.options = &decoded
	}

	if len(proxy.Head) > 0 {
		var decoded operation
		if err := json.Unmarshal(proxy.Head, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Head`)
		}

		v.head = &decoded
	}

	if len(proxy.Patch) > 0 {
		var decoded operation
		if err := json.Unmarshal(proxy.Patch, &decoded); err != nil {
			return errors.Wrap(err, `failed to unmarshal field Patch`)
		}

		v.patch = &decoded
	}
	v.parameters = proxy.Parameters
	return nil
}

func (v *pathItem) Resolve(resolver *Resolver) error {
	if v.IsUnresolved() {

		resolved, err := resolver.Resolve(v.Reference())
		if err != nil {
			return errors.Wrapf(err, `failed to resolve reference %s`, v.Reference())
		}
		asserted, ok := resolved.(*pathItem)
		if !ok {
			return errors.Wrapf(err, `expected resolved reference to be of type PathItem, but got %T`, resolved)
		}
		mutator := MutatePathItem(v)
		mutator.Name(asserted.Name())
		mutator.Path(asserted.Path())
		mutator.Get(asserted.Get())
		mutator.Put(asserted.Put())
		mutator.Post(asserted.Post())
		mutator.Delete(asserted.Delete())
		mutator.Options(asserted.Options())
		mutator.Head(asserted.Head())
		mutator.Patch(asserted.Patch())
		for iter := asserted.Parameters(); iter.Next(); {
			item := iter.Item()
			mutator.Parameter(item)
		}
		if err := mutator.Do(); err != nil {
			return errors.Wrap(err, `failed to mutate`)
		}
		v.resolved = true
	}
	if v.get != nil {
		if err := v.get.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Get`)
		}
	}
	if v.put != nil {
		if err := v.put.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Put`)
		}
	}
	if v.post != nil {
		if err := v.post.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Post`)
		}
	}
	if v.delete != nil {
		if err := v.delete.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Delete`)
		}
	}
	if v.options != nil {
		if err := v.options.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Options`)
		}
	}
	if v.head != nil {
		if err := v.head.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Head`)
		}
	}
	if v.patch != nil {
		if err := v.patch.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Patch`)
		}
	}
	if v.parameters != nil {
		if err := v.parameters.Resolve(resolver); err != nil {
			return errors.Wrap(err, `failed to resolve Parameters`)
		}
	}
	return nil
}

func (v *pathItem) QueryJSON(path string) (ret interface{}, ok bool) {
	path = strings.TrimLeftFunc(path, func(r rune) bool { return r == '#' || r == '/' })
	if path == "" {
		return v, true
	}

	var frag string
	if i := strings.Index(path, "/"); i > -1 {
		frag = path[:i]
		path = path[i+1:]
	} else {
		frag = path
		path = ""
	}

	var target interface{}

	switch frag {
	case "get":
		target = v.get
	case "put":
		target = v.put
	case "post":
		target = v.post
	case "delete":
		target = v.delete
	case "options":
		target = v.options
	case "head":
		target = v.head
	case "patch":
		target = v.patch
	case "parameters":
		target = v.parameters
	default:
		return nil, false
	}

	if qj, ok := target.(QueryJSONer); ok {
		return qj.QueryJSON(path)
	}
	if path == "" {
		return target, true
	}
	return nil, false
}
