package openapi

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"sync"
)

// TagMutator is used to build an instance of Tag. The user must
// call `Apply()` after providing all the necessary information to
// the new instance of Tag with new values
type TagMutator struct {
	mu     sync.Mutex
	proxy  *tag
	target *tag
}

// Apply finalizes the matuation process for Tag and returns the result
func (m *TagMutator) Apply() error {
	m.mu.Lock()
	defer m.mu.Unlock()
	*m.target = *m.proxy
	return nil
}

// MutateTag creates a new mutator object for Tag
// Operations on the mutator are safe to be used concurrently, except for
// when calling `Apply()`, where the user is responsible for restricting access
// to the target object to be mutated
func MutateTag(v Tag) *TagMutator {
	return &TagMutator{
		target: v.(*tag),
		proxy:  v.Clone().(*tag),
	}
}

// Name sets the Name field for object Tag.
func (m *TagMutator) Name(v string) *TagMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.name = v
	return m
}

// Description sets the Description field for object Tag.
func (m *TagMutator) Description(v string) *TagMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.description = v
	return m
}

// ExternalDocs sets the ExternalDocs field for object Tag.
func (m *TagMutator) ExternalDocs(v ExternalDocumentation) *TagMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.externalDocs = v
	return m
}

// Extension sets an arbitrary extension field in Tag
func (m *TagMutator) Extension(name string, value interface{}) *TagMutator {
	if m.proxy.extensions == nil {
		m.proxy.extensions = Extensions{}
	}
	m.proxy.extensions[name] = value
	return m
}
