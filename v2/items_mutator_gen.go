package openapi

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"sync"
)

// ItemsMutator is used to build an instance of Items. The user must
// call `Apply()` after providing all the necessary information to
// the new instance of Items with new values
type ItemsMutator struct {
	mu     sync.Mutex
	proxy  *items
	target *items
}

// Apply finalizes the matuation process for Items and returns the result
func (m *ItemsMutator) Apply() error {
	m.mu.Lock()
	defer m.mu.Unlock()
	*m.target = *m.proxy
	return nil
}

// MutateItems creates a new mutator object for Items
// Operations on the mutator are safe to be used concurrently, except for
// when calling `Apply()`, where the user is responsible for restricting access
// to the target object to be mutated
func MutateItems(v Items) *ItemsMutator {
	return &ItemsMutator{
		target: v.(*items),
		proxy:  v.Clone().(*items),
	}
}

// Type sets the Type field for object Items.
func (m *ItemsMutator) Type(v PrimitiveType) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.typ = v
	return m
}

// Format sets the Format field for object Items.
func (m *ItemsMutator) Format(v string) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.format = v
	return m
}

// Items sets the Items field for object Items.
func (m *ItemsMutator) Items(v Items) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.items = v
	return m
}

// CollectionFormat sets the CollectionFormat field for object Items.
func (m *ItemsMutator) CollectionFormat(v CollectionFormat) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.collectionFormat = v
	return m
}

// Default sets the Default field for object Items.
func (m *ItemsMutator) Default(v interface{}) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.defaultValue = v
	return m
}

// ClearMaximum clears the maximum field
func (m *ItemsMutator) ClearMaximum() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.maximum = nil
	return m
}

// Maximum sets the maximum field.
func (m *ItemsMutator) Maximum(v float64) *ItemsMutator {
	m.proxy.maximum = &v
	return m
}

// ClearExclusiveMaximum clears the exclusiveMaximum field
func (m *ItemsMutator) ClearExclusiveMaximum() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.exclusiveMaximum = nil
	return m
}

// ExclusiveMaximum sets the exclusiveMaximum field.
func (m *ItemsMutator) ExclusiveMaximum(v float64) *ItemsMutator {
	m.proxy.exclusiveMaximum = &v
	return m
}

// ClearMinimum clears the minimum field
func (m *ItemsMutator) ClearMinimum() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.minimum = nil
	return m
}

// Minimum sets the minimum field.
func (m *ItemsMutator) Minimum(v float64) *ItemsMutator {
	m.proxy.minimum = &v
	return m
}

// ClearExclusiveMinimum clears the exclusiveMinimum field
func (m *ItemsMutator) ClearExclusiveMinimum() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.exclusiveMinimum = nil
	return m
}

// ExclusiveMinimum sets the exclusiveMinimum field.
func (m *ItemsMutator) ExclusiveMinimum(v float64) *ItemsMutator {
	m.proxy.exclusiveMinimum = &v
	return m
}

// ClearMaxLength clears the maxLength field
func (m *ItemsMutator) ClearMaxLength() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.maxLength = nil
	return m
}

// MaxLength sets the maxLength field.
func (m *ItemsMutator) MaxLength(v int) *ItemsMutator {
	m.proxy.maxLength = &v
	return m
}

// ClearMinLength clears the minLength field
func (m *ItemsMutator) ClearMinLength() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.minLength = nil
	return m
}

// MinLength sets the minLength field.
func (m *ItemsMutator) MinLength(v int) *ItemsMutator {
	m.proxy.minLength = &v
	return m
}

// Pattern sets the Pattern field for object Items.
func (m *ItemsMutator) Pattern(v string) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.pattern = v
	return m
}

// ClearMaxItems clears the maxItems field
func (m *ItemsMutator) ClearMaxItems() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.maxItems = nil
	return m
}

// MaxItems sets the maxItems field.
func (m *ItemsMutator) MaxItems(v int) *ItemsMutator {
	m.proxy.maxItems = &v
	return m
}

// ClearMinItems clears the minItems field
func (m *ItemsMutator) ClearMinItems() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.minItems = nil
	return m
}

// MinItems sets the minItems field.
func (m *ItemsMutator) MinItems(v int) *ItemsMutator {
	m.proxy.minItems = &v
	return m
}

// UniqueItems sets the UniqueItems field for object Items.
func (m *ItemsMutator) UniqueItems(v bool) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.uniqueItems = v
	return m
}

// ClearEnum clears all elements in enum
func (m *ItemsMutator) ClearEnum() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	_ = m.proxy.enum.Clear()
	return m
}

// Enum appends a value to enum
func (m *ItemsMutator) Enum(value interface{}) *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.enum = append(m.proxy.enum, value)
	return m
}

// ClearMultipleOf clears the multipleOf field
func (m *ItemsMutator) ClearMultipleOf() *ItemsMutator {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.proxy.multipleOf = nil
	return m
}

// MultipleOf sets the multipleOf field.
func (m *ItemsMutator) MultipleOf(v float64) *ItemsMutator {
	m.proxy.multipleOf = &v
	return m
}

// Extension sets an arbitrary extension field in Items
func (m *ItemsMutator) Extension(name string, value interface{}) *ItemsMutator {
	if m.proxy.extensions == nil {
		m.proxy.extensions = Extensions{}
	}
	m.proxy.extensions[name] = value
	return m
}
